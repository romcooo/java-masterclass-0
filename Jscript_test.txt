!INC Local Scripts.EAConstants-JScript

/*
 * Script Name: updateXSDSimpleTypesWithTypeTag
 * Author: Roman Stubna
 * Purpose: TBD
 * Date: 2018-Sep-06
 */
 
//where in the string the type begins for genLink string
var GENLINKS_CONST_TYPE_POSITION = 7;
 
//global variable to count elements updated by a single run of this script
var countOfUpdatedElements = 0;
 
//Input is package and the count so far (use 0 when invoking). Iterates through all subpackages and counts all elements recursively.
function countPkgAndElementsRecursive(selectedPkg, count) {
	count = count + selectedPkg.Elements.count();
	Session.Output("At package: "+selectedPkg.Name+" and count with elements of this package is: "+count);
	var subPackages = selectedPkg.Packages;
	if (subPackages.count > 0) {
		for (var i = 0; i < subPackages.count; i++) {
			count = countPkgAndElementsRecursive(subPackages.getAt(i), count);
		}
	}
	return count;
}
 
//iterates recursively through subpackages and finally invokes iteration through elements of input package
function getSubPackages(package, collection) {
	var subPackages = package.Packages;
	var subPkgCount = subPackages.Count;
	//Session.Output("Current package: "+package.Name);
	if (subPkgCount != 0) 
	{
		//Session.Output(subPkgCount+" - subpackage count");
		for (var i = 0; i < subPkgCount; i++) 
		{
			getSubPackages(subPackages.getAt(i));
		}
	}
	
	getPackageContents(package, collection);
}

//iterates through all elements in input package and performs updateElementWithTypeTag on them
function getPackageContents(package, collection) {
	var element;
	var packageElements = package.Elements();
	//Session.Output(package.Name()+" has count of elements: "+package.Elements().count());
	
	for (var i = 0; i < packageElements.count(); i++)
	{
		element = packageElements.getAt(i);
		performAllElementUpdates(element);
	}
}

//checks if input element has stereotype XSDsimpleType and if so, adds taggedValue equal to the linked parent type (like string)
function updateElementWithTypeTag(element) {
	Session.Output("Checking element: "+element.Name);
	var stereotype = element.Stereotype();
	var type;
	//only proceed for XSDsimpleType elements
	if (stereotype == "XSDsimpleType") {
		typeValue = getTypeFromGenLinks(element);
		tagExists = checkIfTagExistsByType(element, "type");
		//only proceed if a filled tag of this type does not already exist
		if (tagExists != 1) {
			Session.Output("Stereotype of current element is XSDsimpleType and does not yet have a filled type tag, therefore proceeding with addition of tag: type = " + typeValue);
			if (tagExists == 0) {
				var tag = element.TaggedValues().AddNew("type", typeValue);
				tag.Update();
			} else {
				var tag = element.TaggedValues().GetByName("type");
				tag.Value = typeValue;
				tag.Update();
			}
			countOfUpdatedElements++;
		} else Session.Output("Stereotype of current element is XSDsimpleType but already contains a tagged type with a non-empty value.");
	}
}

//gets the type out of genLink to parent of an XSDsimpleType element
function getTypeFromGenLinks(element) {
	var genLinks = element.GenLinks();
	var type = genLinks.substring(GENLINKS_CONST_TYPE_POSITION, genLinks.length-1);
	return type;
}

//0 - does not exist; 1 - exists; 2 - exists but is empty
function checkIfTagExistsByType(element, type) {
	taggedValues = element.TaggedValues();
	var returnVal = 0;
	for (var i = 0; i < taggedValues.count(); i++) {
		currentTag = taggedValues.getAt(i);
		Session.Output("Current tag is:  \""+currentTag.Name+ "\", value = "+currentTag.Value);
		if (currentTag.Name == type) {
			//if empty, set return to 2
			if (currentTag.Value == "") {
				returnVal = 2;
			} else returnVal = 1; //else set to 1
		}
	}
	return returnVal;
}

/*
This function does all the updates to a given element and should always be used wherever youre updating an element (whether during iteration or not).
Used mostly so this scipt can be reused for multiple things - simply write a new function with whatever update you want to do and add it here.
*/
function performAllElementUpdates(element) {
	updateElementWithTypeTag(element);
	return 0;
}

function main()
{	
	var selectedElement;
	var allElements = [];
	selectedElement = Repository.GetContextObject;
	
	//check if selected is an element or package
	if ((Repository.GetContextItemType() != otPackage) && (Repository.getContextItemType() != otElement)) 
	{
		Session.Prompt("Please select a package or element.");
	}
	
	//if selected is a package, count subelements (including all subpackages) and confirm count, then run update of tags.
	//Else, if selected is an element, run updateElementWithTypeTag on this element only.
	if (Repository.GetContextItemType() == otPackage) {
		count = countPkgAndElementsRecursive(selectedElement, 0);
		//if you select No, end script.
		if (Session.Prompt("You are about to run a script on "+count+" elements (only some of which might be updated). Proceed?", promptYESNO) != 3) return -1;
		getSubPackages(selectedElement, allElements);
	} else if (Repository.GetContextItemType() == otElement) {
		if (Session.Prompt("You are about to run a script on a single element (it might be updated). Proceed?", promptYESNO) != 3) return -1;
		performAllElementUpdates(selectedElement);
	}
	
	Session.Prompt("Done. Updated "+countOfUpdatedElements+" elements.", promptOK);
}

main();